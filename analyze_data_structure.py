#!/usr/bin/env python3
"""
üîç ANALYSE DES DONN√âES COLLECT√âES
================================================================================
Analyse la structure des donn√©es pour d√©finir le pipeline ML
================================================================================
"""

import asyncio
import sys
import json
from datetime import datetime

sys.path.append('.')

from app.services.air_quality_service import AirQualityService

async def analyze_data_structure():
    """Analyse compl√®te des donn√©es collect√©es"""
    print("üîç ANALYSE DES DONN√âES POUR PIPELINE ML")
    print("=" * 80)
    print(f"üìÖ Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 80)
    
    try:
        service = AirQualityService()
        
        # Test locations diverses pour voir la vari√©t√© des donn√©es
        locations = [
            (40.7128, -74.0060, "New York"),
            (34.0522, -118.2437, "Los Angeles"), 
            (48.8566, 2.3522, "Paris"),
            (35.6762, 139.6503, "Tokyo")
        ]
        
        all_data = []
        
        for lat, lon, city in locations:
            print(f"\nüìç Analyse donn√©es: {city}")
            print("-" * 50)
            
            # Collecte donn√©es AQI
            aqi_data = await service.get_air_quality_indices(lat, lon)
            
            if aqi_data:
                print(f"‚úÖ Donn√©es re√ßues pour {city}")
                print(f"   Structure: {list(aqi_data.keys())}")
                
                # Analyse measurements
                if 'measurements' in aqi_data:
                    measurements = aqi_data['measurements']
                    print(f"   üìä Polluants: {len(measurements)}")
                    
                    for measurement in measurements:
                        pollutant = measurement.get('pollutant', 'Unknown')
                        value = measurement.get('value', 'N/A')
                        unit = measurement.get('unit', 'N/A')
                        source = measurement.get('source', 'N/A')
                        timestamp = measurement.get('timestamp', 'N/A')
                        
                        print(f"      ‚Ä¢ {pollutant}: {value} {unit} (source: {source})")
                
                # Analyse metadata
                if 'metadata' in aqi_data:
                    meta = aqi_data['metadata']
                    print(f"   üïê Timestamp: {meta.get('timestamp', 'N/A')}")
                    print(f"   üì° Sources: {meta.get('sources_used', [])}")
                    print(f"   ‚è±Ô∏è Collection time: {meta.get('collection_time_ms', 'N/A')}ms")
                
                # Analyse indices
                if 'indices' in aqi_data:
                    indices = aqi_data['indices']
                    print(f"   üìà Indices calcul√©s: {list(indices.keys())}")
                    
                    for index_name, index_data in indices.items():
                        overall_aqi = index_data.get('overall_aqi', 'N/A')
                        category = index_data.get('category', 'N/A')
                        print(f"      ‚Ä¢ {index_name}: {overall_aqi} ({category})")
                
                all_data.append({
                    'location': city,
                    'coordinates': (lat, lon),
                    'data': aqi_data
                })
            else:
                print(f"‚ùå Aucune donn√©e pour {city}")
        
        # Analyse globale
        print("\n" + "=" * 80)
        print("üìä ANALYSE GLOBALE POUR PIPELINE ML")
        print("=" * 80)
        
        if all_data:
            # Polluants disponibles
            all_pollutants = set()
            all_sources = set()
            
            for location_data in all_data:
                data = location_data['data']
                if 'measurements' in data:
                    for measurement in data['measurements']:
                        all_pollutants.add(measurement.get('pollutant', 'Unknown'))
                        all_sources.add(measurement.get('source', 'Unknown'))
            
            print(f"üå°Ô∏è Polluants disponibles ({len(all_pollutants)}):")
            for pollutant in sorted(all_pollutants):
                print(f"   ‚Ä¢ {pollutant}")
            
            print(f"\nüì° Sources de donn√©es ({len(all_sources)}):")
            for source in sorted(all_sources):
                print(f"   ‚Ä¢ {source}")
            
            # Structure pour ML
            print(f"\nü§ñ RECOMMANDATIONS PIPELINE ML:")
            print("   ‚úÖ Features disponibles: Coordonn√©es + polluants + m√©t√©o")
            print("   ‚úÖ Targets possibles: AQI futur, concentrations polluants")
            print("   ‚úÖ Donn√©es temporelles: Timestamps disponibles")
            print("   ‚úÖ Donn√©es g√©ospatiales: Coordonn√©es pr√©cises")
            
            # Prochaines √©tapes
            print(f"\nüéØ PROCHAINES √âTAPES PIPELINE:")
            print("   1. Cr√©ation du data collector pour historique")
            print("   2. Feature engineering (temporal, spatial, m√©t√©o)")
            print("   3. Preprocessing et normalisation")
            print("   4. Mod√®les ML (LSTM, XGBoost, Random Forest)")
            print("   5. Pipeline de pr√©diction temps r√©el")
            
        else:
            print("‚ùå Aucune donn√©e collect√©e - probl√®me d'int√©gration API")
        
        return all_data
        
    except Exception as e:
        print(f"‚ùå Erreur analyse: {str(e)}")
        import traceback
        traceback.print_exc()
        return None

async def main():
    data = await analyze_data_structure()
    if data:
        print(f"\nüéâ Analyse termin√©e - {len(data)} locations analys√©es")
    else:
        print(f"\n‚ö†Ô∏è Analyse √©chou√©e")

if __name__ == "__main__":
    asyncio.run(main())