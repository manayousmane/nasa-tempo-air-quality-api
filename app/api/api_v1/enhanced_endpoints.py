"""
Nouveaux endpoints API pour √âtats/Provinces et indices d√©taill√©s
"""
from typing import List, Optional, Dict, Any
from datetime import datetime
from fastapi import APIRouter, Depends, HTTPException, Query, Path
from pydantic import BaseModel

from app.services.air_quality_service import AirQualityService
from app.core.logging import get_logger

logger = get_logger(__name__)
router = APIRouter()


# Mod√®les de r√©ponse
class StateAirQualityResponse(BaseModel):
    """R√©ponse qualit√© air pour un √âtat/Province"""
    state: str
    city: str
    country: str
    coordinates: Dict[str, float]
    timestamp: str
    epa_aqi_global: int
    epa_category_global: str
    canada_aqhi: Optional[float] = None
    canada_aqhi_category: Optional[str] = None
    pollutant_indices: List[Dict[str, Any]]
    data_sources: List[str]


class AirQualityIndicesResponse(BaseModel):
    """R√©ponse indices d√©taill√©s EPA/WHO/AQHI"""
    location: Dict[str, float]
    region: str
    timestamp: str
    indices_detail: List[Dict[str, Any]]
    summary: Dict[str, Any]


def get_air_quality_service() -> AirQualityService:
    """Dependency to get air quality service."""
    return AirQualityService()


@router.get("/states/list", response_model=List[str])
async def list_available_states():
    """Liste des √âtats/Provinces disponibles"""
    try:
        service = AirQualityService()
        states = list(service.north_america_tester.north_america_locations.keys())
        logger.info(f"üìã Liste √âtats/Provinces: {len(states)} disponibles")
        return states
    except Exception as e:
        logger.error(f"‚ùå Erreur liste √âtats: {str(e)}")
        raise HTTPException(status_code=500, detail="Erreur r√©cup√©ration liste √âtats")


@router.get("/states/{state_name}", response_model=StateAirQualityResponse)
async def get_state_air_quality(
    state_name: str = Path(..., description="Nom de l'√âtat ou Province"),
    country: str = Query("USA", description="Pays (USA ou Canada)"),
    service: AirQualityService = Depends(get_air_quality_service)
):
    """
    Obtenir la qualit√© de l'air pour un √âtat/Province sp√©cifique
    avec indices EPA AQI + WHO + Canada AQHI d√©taill√©s
    """
    try:
        logger.info(f"üèõÔ∏è Requ√™te √âtat: {state_name}, {country}")
        
        result = await service.get_state_air_quality(state_name, country)
        
        if not result:
            raise HTTPException(
                status_code=404, 
                detail=f"√âtat/Province '{state_name}' non trouv√©. Utilisez /states/list pour voir les options disponibles."
            )
        
        response = StateAirQualityResponse(**result)
        logger.info(f"‚úÖ Donn√©es √âtat retourn√©es: AQI {result.get('epa_aqi_global')}")
        return response
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur √âtat {state_name}: {str(e)}")
        raise HTTPException(status_code=500, detail="Erreur interne serveur")


@router.get("/provinces/{province_name}", response_model=StateAirQualityResponse)
async def get_province_air_quality(
    province_name: str = Path(..., description="Nom de la Province canadienne"),
    service: AirQualityService = Depends(get_air_quality_service)
):
    """
    Obtenir la qualit√© de l'air pour une Province canadienne
    avec Canada AQHI d√©taill√©
    """
    try:
        logger.info(f"üá®üá¶ Requ√™te Province: {province_name}")
        
        result = await service.get_state_air_quality(province_name, "Canada")
        
        if not result:
            raise HTTPException(
                status_code=404, 
                detail=f"Province '{province_name}' non trouv√©e. Utilisez /states/list pour voir les options disponibles."
            )
        
        response = StateAirQualityResponse(**result)
        logger.info(f"‚úÖ Donn√©es Province retourn√©es: AQHI {result.get('canada_aqhi')}")
        return response
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur Province {province_name}: {str(e)}")
        raise HTTPException(status_code=500, detail="Erreur interne serveur")


@router.get("/indices", response_model=AirQualityIndicesResponse)
async def get_air_quality_indices(
    latitude: float = Query(..., ge=-90, le=90, description="Latitude"),
    longitude: float = Query(..., ge=-180, le=180, description="Longitude"),
    service: AirQualityService = Depends(get_air_quality_service)
):
    """
    Obtenir tous les indices de qualit√© de l'air (EPA AQI, WHO, Canada AQHI)
    avec d√©tail par polluant et recommandations sant√©
    """
    try:
        logger.info(f"üìä Requ√™te indices: {latitude:.4f}, {longitude:.4f}")
        
        result = await service.get_air_quality_indices(latitude, longitude)
        
        if not result:
            raise HTTPException(
                status_code=404,
                detail="Aucune donn√©e d'indices disponible pour cette localisation"
            )
        
        response = AirQualityIndicesResponse(**result)
        logger.info(f"‚úÖ Indices retourn√©s: {result.get('summary', {}).get('pollutants_count', 0)} polluants")
        return response
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur indices: {str(e)}")
        raise HTTPException(status_code=500, detail="Erreur calcul indices")


@router.get("/regions")
async def get_supported_regions():
    """Liste des r√©gions support√©es avec leurs sp√©cialisations"""
    return {
        "regions": {
            "North America": {
                "description": "√âtats-Unis - Couverture optimale NASA TEMPO",
                "specializations": ["NASA TEMPO", "EPA AirNow", "AIRS"],
                "indices": ["EPA AQI", "WHO Standards"],
                "states_count": 10
            },
            "Canada": {
                "description": "Provinces canadiennes - Indices AQHI sp√©cialis√©s", 
                "specializations": ["CSA OSIRIS", "Canada AQHI", "TEMPO"],
                "indices": ["Canada AQHI", "EPA AQI", "WHO Standards"],
                "provinces_count": 6
            },
            "Europe": {
                "description": "Europe - Sentinel-5P Copernicus",
                "specializations": ["ESA Sentinel-5P", "Sensor.Community"],
                "indices": ["WHO Standards", "EU Air Quality Index"],
                "coverage": "Optimis√© pour donn√©es Copernicus"
            },
            "South America": {
                "description": "Am√©rique du Sud - INPE/CPTEC",
                "specializations": ["INPE/CPTEC", "Sentinel-5P"],
                "indices": ["WHO Standards"],
                "coverage": "Focus Br√©sil et r√©gion"
            },
            "Global": {
                "description": "Couverture mondiale g√©n√©rale",
                "specializations": ["AIRS", "MERRA-2", "AQICN", "OpenAQ"],
                "indices": ["WHO Standards", "Generic AQI"],
                "coverage": "Toutes autres r√©gions"
            }
        },
        "total_sources": 9,
        "cost": "0‚Ç¨ - 100% FREE",
        "note": "Tous les services utilisent uniquement des sources gratuites"
    }


@router.get("/sources")
async def get_data_sources():
    """Information sur toutes les sources de donn√©es utilis√©es"""
    return {
        "free_sources": {
            "nasa_official": {
                "TEMPO": "Satellite g√©ostationnaire - Am√©rique du Nord",
                "AIRS": "Atmospheric Infrared Sounder - Mondial", 
                "MERRA-2": "R√©analyse atmosph√©rique moderne - Mondial"
            },
            "international_space": {
                "ESA Sentinel-5P": "Programme Copernicus - Union Europ√©enne",
                "CSA OSIRIS": "Agence Spatiale Canadienne",
                "INPE/CPTEC": "Institut National Recherche Spatiale Br√©sil"
            },
            "global_networks": {
                "AQICN": "World Air Quality Index - 12,000+ stations (1000 req/jour gratuit)",
                "OpenAQ": "Plateforme open source qualit√© de l'air",
                "Sensor.Community": "R√©seau citoyen europ√©en"
            }
        },
        "standards_calculated": {
            "EPA_AQI": "United States Environmental Protection Agency Air Quality Index",
            "WHO_Guidelines": "World Health Organization Air Quality Guidelines 2021",
            "Canada_AQHI": "Air Quality Health Index - Environnement Canada"
        },
        "total_cost": "0‚Ç¨ - Compl√®tement gratuit",
        "api_limits": "1000 requ√™tes/jour (AQICN), autres illimit√©es",
        "data_quality": "Sources scientifiques officielles de r√©f√©rence"
    }