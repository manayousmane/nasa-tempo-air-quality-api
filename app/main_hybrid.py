"""
üõ∞Ô∏è NASA TEMPO API - Service Hybride Intelligent
===============================================
V3.0 - Vraies donn√©es NASA TEMPO + OpenAQ + Fallback intelligent
"""
from fastapi import FastAPI, HTTPException, Query
from fastapi.middleware.cors import CORSMiddleware
from datetime import datetime, timedelta
import random
import math
from typing import List, Optional
import logging

# Import du service hybride intelligent
from app.services.intelligent_hybrid_service import hybrid_service

# Configuration logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="NASA TEMPO Air Quality API - Hybrid Intelligence",
    description="üõ∞Ô∏è Vraies donn√©es NASA TEMPO + OpenAQ + Fallback intelligent bas√© sur patterns r√©els",
    version="3.0.0"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["GET"],
    allow_headers=["*"],
)

@app.get("/location/full")
async def get_location_data(
    latitude: float = Query(..., description="Latitude de la localisation"),
    longitude: float = Query(..., description="Longitude de la localisation")
):
    """
    üõ∞Ô∏è R√©cup√®re les donn√©es de qualit√© de l'air - HYBRIDE INTELLIGENT
    
    Strat√©gie automatique:
    1. Essaie d'abord NASA TEMPO (si zone Am√©rique du Nord)
    2. Puis OpenAQ (donn√©es mondiales)
    3. Fallback intelligent avec patterns r√©els
    """
    try:
        logger.info(f"üìç Requesting data for {latitude}, {longitude}")
        
        # Utiliser le service hybride intelligent
        result = await hybrid_service.get_location_data(latitude, longitude)
        
        logger.info(f"‚úÖ Data retrieved: {result.get('dataSource', 'Unknown source')}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Error getting location data: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur: {str(e)}")

@app.get("/forecast")
async def get_forecast_data(
    latitude: float = Query(..., description="Latitude de la localisation"),
    longitude: float = Query(..., description="Longitude de la localisation"),
    hours: int = Query(24, description="Nombre d'heures de pr√©diction (1-72)", ge=1, le=72)
):
    """
    üîÆ Pr√©dictions de qualit√© de l'air - Mod√®les bas√©s sur patterns NASA
    
    Utilise les donn√©es actuelles (vraies ou fallback intelligent) pour g√©n√©rer
    des pr√©dictions bas√©es sur les patterns observ√©s par NASA TEMPO
    """
    try:
        logger.info(f"üîÆ Forecast request for {latitude}, {longitude} - {hours}h")
        
        # Utiliser le service hybride intelligent
        result = await hybrid_service.get_forecast_data(latitude, longitude, hours)
        
        base_source = result.get('metadata', {}).get('base_data_source', 'Unknown')
        logger.info(f"‚úÖ Forecast generated based on: {base_source}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Error generating forecast: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur: {str(e)}")

@app.get("/service/stats")
async def get_service_statistics():
    """
    üìä Statistiques du service hybride
    
    Montre l'utilisation des diff√©rentes sources de donn√©es:
    - NASA TEMPO (satellite)
    - OpenAQ (stations mondiales)  
    - Fallback intelligent
    """
    try:
        stats = hybrid_service.get_service_stats()
        return {
            "service_name": "NASA TEMPO Hybrid Intelligence",
            "version": "3.0.0",
            "status": "operational",
            "statistics": stats,
            "last_check": datetime.now().isoformat() + "Z"
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur: {str(e)}")

@app.get("/")
async def root():
    """
    üõ∞Ô∏è NASA TEMPO API - Service Hybride Intelligent
    """
    return {
        "service": "NASA TEMPO Air Quality API",
        "version": "3.0.0 - Hybrid Intelligence", 
        "description": "üõ∞Ô∏è Vraies donn√©es NASA TEMPO + OpenAQ + Fallback intelligent",
        "endpoints": {
            "/location/full": "Donn√©es actuelles (latitude, longitude)",
            "/forecast": "Pr√©dictions qualit√© de l'air (latitude, longitude, hours)",
            "/service/stats": "Statistiques d'utilisation des sources de donn√©es"
        },
        "data_sources": [
            "NASA TEMPO (satellite data)",
            "OpenAQ (global network)",
            "Intelligent fallback (WHO/EPA patterns)"
        ],
        "coverage": "Mondial avec priorit√© Am√©rique du Nord (NASA TEMPO)",
        "status": "‚úÖ Operational",
        "timestamp": datetime.now().isoformat() + "Z"
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)