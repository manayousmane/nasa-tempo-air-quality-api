"""
Service hybride intelligent : TEMPO + APIs Open Source avec calcul d'AQI pr√©cis
Combine la qualit√© TEMPO avec les concentrations r√©elles des APIs ouvertes
"""
import logging
from datetime import datetime
from typing import Dict, Optional
import sys
import os

# Ajouter le chemin parent pour les imports
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

try:
    from app.connectors.tempo_latest_client import TempoLatestDataClient
    from app.connectors.open_source_apis import OpenSourceAPICollector
    from app.connectors.openweather_client import OpenWeatherClient
except ImportError:
    from connectors.tempo_latest_client import TempoLatestDataClient
    from connectors.open_source_apis import OpenSourceAPICollector
    from connectors.openweather_client import OpenWeatherClient

logger = logging.getLogger(__name__)

class HybridTEMPOService:
    """
    Service hybride intelligent combinant TEMPO + APIs Open Source
    Fournit les vraies concentrations ET la validation TEMPO
    """
    
    def __init__(self):
        self.tempo_client = TempoLatestDataClient()
        self.open_source_collector = OpenSourceAPICollector()
        self.weather_client = OpenWeatherClient()
        
    async def get_comprehensive_air_quality(self, lat: float, lon: float) -> Dict:
        """
        R√©cup√®re les donn√©es compl√®tes : concentrations r√©elles + validation TEMPO + AQI pr√©cis
        """
        logger.info(f"üéØ Analyse compl√®te qualit√© air TEMPO+APIs: {lat}, {lon}")
        
        try:
            # 1. Donn√©es TEMPO (validation/m√©tadonn√©es)
            logger.info("üõ∞Ô∏è R√©cup√©ration m√©tadonn√©es TEMPO...")
            tempo_data = await self.tempo_client.get_latest_available_data(lat, lon)
            
            # 2. APIs Open Source (concentrations r√©elles)
            logger.info("üåç R√©cup√©ration concentrations APIs Open Source...")
            open_source_data = await self.open_source_collector.get_all_available_data(lat, lon)
            
            # 3. Donn√©es m√©t√©o
            logger.info("üå§Ô∏è R√©cup√©ration donn√©es m√©t√©o...")
            weather_data = await self.weather_client.get_weather_data(lat, lon)
            
            # 4. Synth√®se intelligente
            comprehensive_data = self._create_comprehensive_response(
                tempo_data, open_source_data, weather_data, lat, lon
            )
            
            logger.info(f"‚úÖ Analyse compl√®te termin√©e: AQI {comprehensive_data.get('aqi', 'N/A')}")
            return comprehensive_data
            
        except Exception as e:
            logger.error(f"‚ùå Erreur service hybride: {e}")
            return self._error_response(lat, lon, str(e))
    
    def _create_comprehensive_response(self, tempo_data: Dict, open_source_data: Dict, 
                                     weather_data: Dict, lat: float, lon: float) -> Dict:
        """
        Cr√©e une r√©ponse compl√®te combinant toutes les sources
        """
        response = {
            'coordinates': [lat, lon],
            'timestamp': datetime.utcnow().isoformat() + 'Z',
            'data_sources': {
                'tempo_status': 'available' if tempo_data else 'unavailable',
                'open_source_status': 'available' if open_source_data else 'unavailable',
                'weather_status': 'available' if weather_data else 'unavailable'
            },
            'pollutants': {},
            'air_quality': {},
            'weather': weather_data or {},
            'tempo_validation': {}
        }
        
        # Polluants prioritaires avec concentrations r√©elles
        if open_source_data and 'sources_used' in open_source_data:
            logger.info(f"üìä Int√©gration concentrations depuis: {open_source_data['sources_used']}")
            
            # Concentrations r√©elles depuis APIs open source
            for pollutant in ['pm25', 'pm10', 'no2', 'o3', 'so2', 'co']:
                if pollutant in open_source_data:
                    concentration = open_source_data[pollutant]
                    source = open_source_data.get(f'{pollutant}_source', 'Unknown')
                    
                    response['pollutants'][pollutant] = {
                        'concentration': concentration,
                        'unit': self._get_standard_unit(pollutant),
                        'source': source,
                        'quality': 'Real-time measurement',
                        'aqi_contribution': self._calculate_individual_aqi(pollutant, concentration)
                    }
            
            # AQI global calcul√©
            response['air_quality'] = {
                'aqi': open_source_data.get('aqi', self._calculate_comprehensive_aqi(response['pollutants'])),
                'category': self._get_aqi_category(open_source_data.get('aqi', 50)),
                'dominant_pollutant': self._find_dominant_pollutant(response['pollutants']),
                'calculation_method': 'EPA Standard + Real measurements'
            }
        
        # Validation et m√©tadonn√©es TEMPO
        if tempo_data:
            response['tempo_validation'] = {
                'satellite_coverage': True,
                'available_products': list([k for k in tempo_data.keys() if k in ['no2', 'hcho', 'o3', 'aerosol']]),
                'search_period_days': tempo_data.get('search_period_days', 7),
                'latest_satellite_pass': self._get_latest_tempo_date(tempo_data),
                'data_quality': 'NASA Official Satellite Data',
                'note': 'TEMPO provides validation and trend analysis'
            }
            
            # Comparaison TEMPO vs Ground-based si possible
            comparison = self._compare_tempo_vs_ground(tempo_data, response['pollutants'])
            if comparison:
                response['tempo_validation']['comparison'] = comparison
        
        # Recommandations de sant√©
        response['health_recommendations'] = self._generate_health_recommendations(
            response['air_quality']
        )
        
        # M√©tadonn√©es de confiance
        response['confidence'] = {
            'overall': self._calculate_overall_confidence(tempo_data, open_source_data),
            'concentration_reliability': 'High' if open_source_data else 'Low',
            'temporal_accuracy': 'Real-time' if open_source_data else 'Estimated',
            'spatial_resolution': '~10km (API stations)' if open_source_data else '~50km (estimated)'
        }
        
        return response
    
    def _get_standard_unit(self, pollutant: str) -> str:
        """Unit√©s standard pour chaque polluant"""
        units = {
            'pm25': 'Œºg/m¬≥',
            'pm10': 'Œºg/m¬≥', 
            'no2': 'Œºg/m¬≥',
            'o3': 'Œºg/m¬≥',
            'so2': 'Œºg/m¬≥',
            'co': 'mg/m¬≥'
        }
        return units.get(pollutant, 'unknown')
    
    def _calculate_individual_aqi(self, pollutant: str, concentration: float) -> int:
        """Calcule l'AQI individuel pour un polluant (m√©thode EPA)"""
        if concentration is None:
            return 0
            
        # Tables EPA simplifi√©es
        if pollutant == 'pm25':
            if concentration <= 12.0:
                return int((50/12.0) * concentration)
            elif concentration <= 35.4:
                return int(50 + ((100-50)/(35.4-12.0)) * (concentration-12.0))
            elif concentration <= 55.4:
                return int(100 + ((150-100)/(55.4-35.4)) * (concentration-35.4))
            else:
                return min(int(150 + ((200-150)/(150.4-55.4)) * (concentration-55.4)), 300)
        
        elif pollutant == 'pm10':
            if concentration <= 54:
                return int((50/54) * concentration)
            elif concentration <= 154:
                return int(50 + ((100-50)/(154-54)) * (concentration-54))
            else:
                return min(int(100 + ((150-100)/(254-154)) * (concentration-154)), 200)
        
        elif pollutant == 'no2':
            # Conversion ppb vers AQI (approximation)
            return min(int(concentration * 0.5), 200)
        
        elif pollutant == 'o3':
            # Conversion vers AQI (approximation)
            return min(int(concentration * 0.8), 200)
        
        else:
            return min(int(concentration * 0.3), 150)
    
    def _calculate_comprehensive_aqi(self, pollutants: Dict) -> int:
        """Calcule l'AQI global bas√© sur le polluant le plus √©lev√©"""
        max_aqi = 0
        
        for pollutant, data in pollutants.items():
            if isinstance(data, dict) and 'aqi_contribution' in data:
                max_aqi = max(max_aqi, data['aqi_contribution'])
        
        return max_aqi if max_aqi > 0 else 50
    
    def _get_aqi_category(self, aqi: int) -> str:
        """Retourne la cat√©gorie AQI"""
        if aqi <= 50:
            return "Bon"
        elif aqi <= 100:
            return "Mod√©r√©"
        elif aqi <= 150:
            return "Malsain pour groupes sensibles"
        elif aqi <= 200:
            return "Malsain"
        elif aqi <= 300:
            return "Tr√®s malsain"
        else:
            return "Dangereux"
    
    def _find_dominant_pollutant(self, pollutants: Dict) -> str:
        """Trouve le polluant dominant (AQI le plus √©lev√©)"""
        max_aqi = 0
        dominant = "pm25"
        
        for pollutant, data in pollutants.items():
            if isinstance(data, dict) and 'aqi_contribution' in data:
                if data['aqi_contribution'] > max_aqi:
                    max_aqi = data['aqi_contribution']
                    dominant = pollutant
        
        return dominant
    
    def _get_latest_tempo_date(self, tempo_data: Dict) -> str:
        """Extrait la date la plus r√©cente des donn√©es TEMPO"""
        latest_date = "Unknown"
        
        for key, value in tempo_data.items():
            if isinstance(value, dict) and 'date' in value:
                latest_date = value['date']
                break
        
        return latest_date
    
    def _compare_tempo_vs_ground(self, tempo_data: Dict, ground_pollutants: Dict) -> Optional[Dict]:
        """Compare les donn√©es TEMPO vs stations au sol (si applicable)"""
        # Pour l'instant, simple indication de disponibilit√©
        tempo_available = len([k for k in tempo_data.keys() if k in ['no2', 'hcho', 'o3']]) 
        ground_available = len(ground_pollutants)
        
        if tempo_available > 0 and ground_available > 0:
            return {
                'tempo_products': tempo_available,
                'ground_measurements': ground_available,
                'note': 'Both satellite and ground data available for cross-validation'
            }
        
        return None
    
    def _generate_health_recommendations(self, air_quality: Dict) -> Dict:
        """G√©n√®re des recommandations de sant√© bas√©es sur l'AQI"""
        aqi = air_quality.get('aqi', 50)
        
        if aqi <= 50:
            return {
                'general': 'Qualit√© air excellente. Activit√©s ext√©rieures recommand√©es.',
                'sensitive': 'Aucune restriction pour les personnes sensibles.',
                'activities': 'Toutes activit√©s ext√©rieures possibles.'
            }
        elif aqi <= 100:
            return {
                'general': 'Qualit√© air acceptable. Activit√©s normales possibles.',
                'sensitive': 'Personnes sensibles peuvent ressentir de l√©gers effets.',
                'activities': 'Activit√©s ext√©rieures g√©n√©ralement s√ªres.'
            }
        elif aqi <= 150:
            return {
                'general': 'Malsain pour groupes sensibles.',
                'sensitive': '√âviter les activit√©s ext√©rieures prolong√©es.',
                'activities': 'R√©duire les activit√©s intenses √† l\'ext√©rieur.'
            }
        else:
            return {
                'general': 'Qualit√© air malsaine. Limiter exposition ext√©rieure.',
                'sensitive': 'Rester √† l\'int√©rieur. √âviter toute activit√© ext√©rieure.',
                'activities': 'Activit√©s ext√©rieures fortement d√©conseill√©es.'
            }
    
    def _calculate_overall_confidence(self, tempo_data: Dict, open_source_data: Dict) -> str:
        """Calcule le niveau de confiance global"""
        score = 0
        
        if tempo_data:
            score += 30  # TEMPO validation
        if open_source_data and open_source_data.get('sources_used'):
            score += 50  # Real measurements
        if len(open_source_data.get('sources_used', [])) > 1:
            score += 20  # Multiple sources
        
        if score >= 80:
            return "Tr√®s √©lev√©e"
        elif score >= 60:
            return "√âlev√©e"
        elif score >= 40:
            return "Mod√©r√©e"
        else:
            return "Limit√©e"
    
    def _error_response(self, lat: float, lon: float, error: str) -> Dict:
        """R√©ponse d'erreur standardis√©e"""
        return {
            'coordinates': [lat, lon],
            'timestamp': datetime.utcnow().isoformat() + 'Z',
            'status': 'error',
            'message': error,
            'fallback': 'Service temporarily unavailable'
        }