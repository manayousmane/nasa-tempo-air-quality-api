"""
üõ∞Ô∏è SERVICE MOD√àLES TEMPO
================================================================================
Service pour charger et utiliser les mod√®les ML TEMPO (m√™me avec performances faibles)
Sera am√©lior√© une fois les mod√®les optimis√©s
================================================================================
"""

import pickle
import json
import numpy as np
import pandas as pd
from pathlib import Path
from typing import Dict, List, Optional, Any, Tuple
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

class TempoModelService:
    """Service pour g√©rer les mod√®les TEMPO"""
    
    def __init__(self):
        self.models_dir = Path("models/tempo")
        self.models = {}
        self.metadata = {}
        self.is_loaded = False
        self.load_models()
    
    def load_models(self) -> bool:
        """Charge tous les mod√®les TEMPO disponibles"""
        try:
            if not self.models_dir.exists():
                logger.warning(f"Dossier mod√®les non trouv√©: {self.models_dir}")
                return False
            
            # Charger metadata des mod√®les
            metadata_files = list(self.models_dir.glob("tempo_models_metadata_*.json"))
            if metadata_files:
                latest_metadata = max(metadata_files, key=lambda x: x.stat().st_mtime)
                with open(latest_metadata, 'r') as f:
                    self.metadata = json.load(f)
                logger.info(f"üìä Metadata charg√©e: {latest_metadata.name}")
            
            # Charger les mod√®les individuels
            model_files = list(self.models_dir.glob("*_tempo.pkl"))
            loaded_count = 0
            
            for model_file in model_files:
                try:
                    with open(model_file, 'rb') as f:
                        model_obj = pickle.load(f)
                    
                    # Extraction du nom du polluant et algorithme
                    filename = model_file.stem  # ex: pm25_random_forest_tempo
                    parts = filename.replace('_tempo', '').split('_')
                    
                    if len(parts) >= 2:
                        pollutant = parts[0]
                        algorithm = '_'.join(parts[1:])
                        
                        if pollutant not in self.models:
                            self.models[pollutant] = {}
                        
                        # Le mod√®le lui-m√™me est l'objet pickled, pas un dictionnaire
                        self.models[pollutant][algorithm] = model_obj
                        loaded_count += 1
                        
                except Exception as e:
                    logger.error(f"Erreur chargement {model_file}: {str(e)}")
            
            self.is_loaded = loaded_count > 0
            logger.info(f"ü§ñ Mod√®les charg√©s: {loaded_count}")
            
            return self.is_loaded
            
        except Exception as e:
            logger.error(f"Erreur chargement mod√®les: {str(e)}")
            return False
    
    def get_available_pollutants(self) -> List[str]:
        """Retourne la liste des polluants disponibles"""
        return list(self.models.keys())
    
    def get_available_algorithms(self, pollutant: str) -> List[str]:
        """Retourne les algorithmes disponibles pour un polluant"""
        if pollutant in self.models:
            return list(self.models[pollutant].keys())
        return []
    
    def get_best_model_for_pollutant(self, pollutant: str) -> Optional[Any]:
        """Retourne le meilleur mod√®le pour un polluant selon metadata"""
        if not self.is_loaded or pollutant not in self.models:
            return None
        
        # Utiliser metadata pour trouver le meilleur mod√®le
        if 'best_models' in self.metadata and pollutant in self.metadata['best_models']:
            best_algorithm = self.metadata['best_models'][pollutant].get('algorithm')
            if best_algorithm and best_algorithm in self.models[pollutant]:
                return self.models[pollutant][best_algorithm]
        
        # Fallback: prendre le premier mod√®le disponible
        algorithms = self.get_available_algorithms(pollutant)
        if algorithms:
            return self.models[pollutant][algorithms[0]]
        
        return None
    
    def create_feature_vector(self, coordinates: Dict[str, float], 
                            features: Dict[str, Any]) -> np.ndarray:
        """Cr√©e un vecteur de features pour la pr√©diction (40 features comme dataset)"""
        try:
            # Features g√©ographiques
            latitude = coordinates.get('latitude', 45.0)
            longitude = coordinates.get('longitude', -75.0)
            
            # Features temporelles
            hour = features.get('hour', 12)
            day_of_week = features.get('day_of_week', 4)  # Vendredi par d√©faut
            month = features.get('month', 10)  # Octobre
            season = (month % 12 + 3) // 3  # Calcul saison
            is_weekend = int(day_of_week >= 5)
            
            # Features temporelles cycliques
            hour_sin = np.sin(2 * np.pi * hour / 24)
            hour_cos = np.cos(2 * np.pi * hour / 24)
            day_sin = np.sin(2 * np.pi * day_of_week / 7)
            day_cos = np.cos(2 * np.pi * day_of_week / 7)
            month_sin = np.sin(2 * np.pi * month / 12)
            month_cos = np.cos(2 * np.pi * month / 12)
            
            # Features m√©t√©o (avec valeurs par d√©faut)
            temperature = features.get('temperature', 15.0)
            humidity = features.get('humidity', 65.0)
            pressure = features.get('pressure', 1013.25)
            wind_speed = features.get('wind_speed', 5.0)
            wind_direction = features.get('wind_direction', 180.0)
            
            # Composantes du vent
            wind_u = wind_speed * np.cos(np.radians(wind_direction))
            wind_v = wind_speed * np.sin(np.radians(wind_direction))
            
            # Features g√©ographiques avanc√©es
            elevation = features.get('elevation', 100.0)
            population_density = features.get('population_density', 1000.0)
            urban_index = features.get('urban_index', 0.5)
            
            # Land use (approxim√© selon la localisation)
            # Urbain si densit√© population √©lev√©e
            land_use_urban = 1 if population_density > 5000 else 0
            land_use_suburban = 1 if 1000 < population_density <= 5000 else 0
            land_use_rural = 1 if 100 < population_density <= 1000 else 0
            land_use_forest = 1 if population_density <= 100 else 0
            
            # Features air quality actuelles (avec valeurs par d√©faut)
            pm25_current = features.get('pm25_current', 12.0)
            pm10_current = features.get('pm10_current', 20.0)
            no2_current = features.get('no2_current', 25.0)
            o3_current = features.get('o3_current', 50.0)
            co_current = features.get('co_current', 1.0)
            so2_current = features.get('so2_current', 5.0)
            
            # Assemblage du vecteur selon l'ordre du dataset d'entra√Ænement
            feature_vector = np.array([
                # G√©ographiques de base
                latitude, longitude,
                
                # Temporelles
                hour, day_of_week, month, season, is_weekend,
                
                # Temporelles cycliques
                hour_sin, hour_cos, day_sin, day_cos, month_sin, month_cos,
                
                # M√©t√©o
                temperature, humidity, pressure, wind_speed, wind_direction,
                wind_u, wind_v,
                
                # G√©ographiques avanc√©es
                elevation, population_density, urban_index,
                
                # Land use
                land_use_urban, land_use_suburban, land_use_rural, land_use_forest,
                
                # Air quality actuelles
                pm25_current, pm10_current, no2_current, o3_current, co_current, so2_current
            ])
            
            # V√©rification : devrait avoir 33 features selon le header CSV
            # Si les mod√®les attendent 40, il y a peut-√™tre d'autres features g√©n√©r√©es
            
            if len(feature_vector) < 40:
                # Ajouter features manquantes (interactions, etc.)
                extra_features = np.array([
                    # Interactions g√©ographiques
                    latitude * longitude,
                    latitude**2,
                    longitude**2,
                    
                    # Interactions m√©t√©o
                    temperature * humidity / 100,
                    wind_speed**2,
                    
                    # Indices composites
                    (pm25_current + pm10_current) / 2,  # PM composite
                    (no2_current + o3_current) / 2      # Gaz composite
                ])
                
                feature_vector = np.concatenate([feature_vector, extra_features])
            
            # Assurer exactement 40 features
            if len(feature_vector) > 40:
                feature_vector = feature_vector[:40]
            elif len(feature_vector) < 40:
                # Padding avec des z√©ros
                padding = np.zeros(40 - len(feature_vector))
                feature_vector = np.concatenate([feature_vector, padding])
            
            return feature_vector.reshape(1, -1)
            
        except Exception as e:
            logger.error(f"Erreur cr√©ation feature vector: {str(e)}")
            # Retour vecteur par d√©faut avec 40 features
            return np.zeros((1, 40))
    
    def predict_single_pollutant(self, pollutant: str, 
                               coordinates: Dict[str, float],
                               features: Dict[str, Any]) -> Optional[float]:
        """Pr√©diction pour un polluant sp√©cifique"""
        try:
            model = self.get_best_model_for_pollutant(pollutant)
            if model is None:
                logger.warning(f"Aucun mod√®le disponible pour {pollutant}")
                return None
            
            # Debug: v√©rifier le type de mod√®le
            logger.debug(f"Type de mod√®le pour {pollutant}: {type(model)}")
            
            # Si le mod√®le est un dictionnaire (format d'entra√Ænement), extraire le mod√®le
            if isinstance(model, dict):
                if 'model' in model:
                    actual_model = model['model']
                else:
                    logger.error(f"Format mod√®le invalide pour {pollutant}: {model.keys()}")
                    return None
            else:
                actual_model = model
            
            # V√©rifier que le mod√®le a une m√©thode predict
            if not hasattr(actual_model, 'predict'):
                logger.error(f"Mod√®le {pollutant} n'a pas de m√©thode predict: {type(actual_model)}")
                return None
            
            # Cr√©ation du vecteur de features
            feature_vector = self.create_feature_vector(coordinates, features)
            
            # Pr√©diction
            prediction = actual_model.predict(feature_vector)[0]
            
            # Validation et nettoyage de la pr√©diction
            if np.isnan(prediction) or np.isinf(prediction):
                logger.warning(f"Pr√©diction invalide pour {pollutant}: {prediction}")
                return None
            
            # Contraintes physiques basiques
            if prediction < 0:
                prediction = 0.0
            
            # Limites maximales raisonnables
            max_values = {
                'pm25': 300.0, 'pm10': 500.0, 'no2': 200.0,
                'o3': 300.0, 'co': 50.0, 'so2': 100.0
            }
            
            max_val = max_values.get(pollutant, 1000.0)
            if prediction > max_val:
                prediction = max_val
            
            return float(prediction)
            
        except Exception as e:
            logger.error(f"Erreur pr√©diction {pollutant}: {str(e)}")
            return None
    
    def predict_all_pollutants(self, coordinates: Dict[str, float],
                             features: Dict[str, Any]) -> Dict[str, Optional[float]]:
        """Pr√©diction pour tous les polluants disponibles"""
        predictions = {}
        
        for pollutant in self.get_available_pollutants():
            predictions[pollutant] = self.predict_single_pollutant(
                pollutant, coordinates, features
            )
        
        return predictions
    
    def calculate_aqi(self, predictions: Dict[str, Optional[float]]) -> Dict[str, Any]:
        """Calcul approximatif de l'AQI bas√© sur les pr√©dictions"""
        try:
            # Conversion vers AQI EPA (approximation)
            aqi_values = {}
            
            # PM2.5
            if predictions.get('pm25') is not None:
                pm25 = predictions['pm25']
                if pm25 <= 12.0:
                    aqi_values['pm25'] = pm25 * 50 / 12.0
                elif pm25 <= 35.4:
                    aqi_values['pm25'] = 50 + (pm25 - 12.0) * 50 / (35.4 - 12.0)
                elif pm25 <= 55.4:
                    aqi_values['pm25'] = 100 + (pm25 - 35.4) * 50 / (55.4 - 35.4)
                else:
                    aqi_values['pm25'] = min(300, 150 + (pm25 - 55.4) * 100 / 150)
            
            # NO2 (approximation)
            if predictions.get('no2') is not None:
                no2 = predictions['no2']
                aqi_values['no2'] = min(300, no2 * 2)  # Approximation simple
            
            # O3 (approximation)
            if predictions.get('o3') is not None:
                o3 = predictions['o3']
                aqi_values['o3'] = min(300, o3 * 1.5)  # Approximation simple
            
            # AQI global = maximum des AQI individuels
            if aqi_values:
                overall_aqi = max(aqi_values.values())
                
                # Cat√©gorie AQI
                if overall_aqi <= 50:
                    category = "Good"
                    color = "Green"
                elif overall_aqi <= 100:
                    category = "Moderate"
                    color = "Yellow"
                elif overall_aqi <= 150:
                    category = "Unhealthy for Sensitive Groups"
                    color = "Orange"
                elif overall_aqi <= 200:
                    category = "Unhealthy"
                    color = "Red"
                else:
                    category = "Very Unhealthy"
                    color = "Purple"
                
                return {
                    'overall': round(overall_aqi),
                    'category': category,
                    'color': color,
                    'individual': {k: round(v) for k, v in aqi_values.items()}
                }
            
            return {'overall': None, 'category': 'Unknown', 'color': 'Gray'}
            
        except Exception as e:
            logger.error(f"Erreur calcul AQI: {str(e)}")
            return {'overall': None, 'category': 'Error', 'color': 'Gray'}
    
    def get_health_recommendations(self, aqi: Dict[str, Any]) -> Dict[str, str]:
        """Recommandations sant√© bas√©es sur l'AQI"""
        try:
            overall_aqi = aqi.get('overall', 0)
            
            if overall_aqi is None or overall_aqi <= 50:
                return {
                    'general': 'Air quality is good. Enjoy outdoor activities.',
                    'sensitive': 'No health impacts expected for sensitive groups.',
                    'outdoor_activity': 'Safe for all outdoor activities.'
                }
            elif overall_aqi <= 100:
                return {
                    'general': 'Air quality is acceptable for most people.',
                    'sensitive': 'Sensitive individuals may experience minor symptoms.',
                    'outdoor_activity': 'Generally safe for outdoor activities.'
                }
            elif overall_aqi <= 150:
                return {
                    'general': 'Unhealthy for sensitive groups.',
                    'sensitive': 'Sensitive groups should limit prolonged outdoor exertion.',
                    'outdoor_activity': 'Consider reducing intense outdoor activities.'
                }
            elif overall_aqi <= 200:
                return {
                    'general': 'Unhealthy air quality.',
                    'sensitive': 'Sensitive groups should avoid outdoor activities.',
                    'outdoor_activity': 'Everyone should limit outdoor exertion.'
                }
            else:
                return {
                    'general': 'Very unhealthy air quality.',
                    'sensitive': 'Everyone should avoid outdoor activities.',
                    'outdoor_activity': 'Stay indoors and keep windows closed.'
                }
                
        except Exception as e:
            logger.error(f"Erreur recommandations sant√©: {str(e)}")
            return {
                'general': 'Unable to provide recommendations.',
                'sensitive': 'Consult local air quality reports.',
                'outdoor_activity': 'Use caution with outdoor activities.'
            }
    
    def get_service_status(self) -> Dict[str, Any]:
        """Status du service de mod√®les"""
        return {
            'is_loaded': self.is_loaded,
            'models_available': len(self.models),
            'pollutants': self.get_available_pollutants(),
            'total_algorithms': sum(len(algs) for algs in self.models.values()),
            'metadata_loaded': bool(self.metadata),
            'models_directory': str(self.models_dir),
            'last_updated': datetime.now().isoformat()
        }