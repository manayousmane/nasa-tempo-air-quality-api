"""
NASA TEMPO CONNECTOR - Connexion R√âELLE aux donn√©es satellitaires TEMPO
Documentation: https://tempo.si.edu/data-products
API: https://disc.gsfc.nasa.gov/datasets/TEMPO_NO2_L2_V03/summary
"""

import aiohttp
import asyncio
import logging
import os
import json
import math
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import xml.etree.ElementTree as ET
from urllib.parse import urlencode

logger = logging.getLogger(__name__)

class NASATempoConnector:
    """
    Connecteur sp√©cialis√© pour les donn√©es TEMPO (Tropospheric Emissions: Monitoring of Pollution)
    
    TEMPO est le premier instrument g√©ostationnaire am√©ricain d√©di√© √† la surveillance 
    de la pollution atmosph√©rique sur l'Am√©rique du Nord avec une r√©solution temporelle horaire.
    
    Donn√©es disponibles:
    - NO2 (Dioxyde d'azote) - Niveau 2 et 3
    - HCHO (Formald√©hyde) - Niveau 2 et 3  
    - O3 (Ozone) - Niveau 2 et 3
    - Aerosol Index - Niveau 2
    - Cloud products
    
    Couverture g√©ographique:
    - Am√©rique du Nord (Canada, USA, Mexique)
    - Latitude: 15¬∞N √† 70¬∞N
    - Longitude: 175¬∞W √† 40¬∞W
    
    R√©solution:
    - Spatiale: 2.1 x 4.4 km au nadir
    - Temporelle: Horaire pendant les heures de jour (13-14 observations/jour)
    """
    
    def __init__(self):
        self.session: Optional[aiohttp.ClientSession] = None
        
        # Credentials NASA Earthdata (obligatoires)
        self.earthdata_username = os.getenv('NASA_EARTHDATA_USERNAME')
        self.earthdata_password = os.getenv('NASA_EARTHDATA_PASSWORD')
        
        # URLs des services NASA
        self.base_urls = {
            'earthdata_login': 'https://urs.earthdata.nasa.gov/oauth/authorize',
            'gesdisc': 'https://disc.gsfc.nasa.gov',
            'giovanni': 'https://giovanni.gsfc.nasa.gov/giovanni/',
            'opendap': 'https://disc.gsfc.nasa.gov/opendap/',
            'search': 'https://cmr.earthdata.nasa.gov/search/',
            'tempo_portal': 'https://tempo.si.edu/data'
        }
        
        # Produits TEMPO disponibles
        self.tempo_products = {
            'NO2': {
                'L2': 'TEMPO_NO2_L2',
                'L3': 'TEMPO_NO2_L3',
                'description': 'Nitrogen Dioxide Column Density',
                'unit': 'molecules/cm¬≤'
            },
            'HCHO': {
                'L2': 'TEMPO_HCHO_L2', 
                'L3': 'TEMPO_HCHO_L3',
                'description': 'Formaldehyde Column Density',
                'unit': 'molecules/cm¬≤'
            },
            'O3': {
                'L2': 'TEMPO_O3TOT_L2',
                'L3': 'TEMPO_O3TOT_L3', 
                'description': 'Total Ozone Column',
                'unit': 'Dobson Units'
            },
            'AEROSOL': {
                'L2': 'TEMPO_AER_L2',
                'description': 'Aerosol Index and Properties',
                'unit': 'unitless'
            }
        }
        
        # Zone de couverture TEMPO
        self.coverage_bounds = {
            'lat_min': 15.0,   # 15¬∞N
            'lat_max': 70.0,   # 70¬∞N  
            'lon_min': -175.0, # 175¬∞W
            'lon_max': -40.0   # 40¬∞W
        }
        
        logger.info("üõ∞Ô∏è Initialisation du connecteur NASA TEMPO")
        self._check_credentials()
    
    def _check_credentials(self):
        """V√©rifie la pr√©sence des credentials NASA Earthdata"""
        if not self.earthdata_username or not self.earthdata_password:
            logger.error("‚ùå Credentials NASA Earthdata manquants!")
            logger.info("üìù Cr√©ez un compte sur: https://urs.earthdata.nasa.gov/")
            logger.info("üîß Configurez les variables:")
            logger.info("   export NASA_EARTHDATA_USERNAME='votre_username'")
            logger.info("   export NASA_EARTHDATA_PASSWORD='votre_password'")
        else:
            logger.info(f"‚úÖ Credentials configur√©s pour: {self.earthdata_username}")
    
    def is_in_tempo_coverage(self, latitude: float, longitude: float) -> bool:
        """V√©rifie si les coordonn√©es sont dans la zone de couverture TEMPO"""
        return (
            self.coverage_bounds['lat_min'] <= latitude <= self.coverage_bounds['lat_max'] and
            self.coverage_bounds['lon_min'] <= longitude <= self.coverage_bounds['lon_max']
        )
    
    async def __aenter__(self):
        """Initialise la session HTTP avec authentification NASA"""
        connector = aiohttp.TCPConnector(ssl=False)  # Pour contourner les probl√®mes SSL
        
        self.session = aiohttp.ClientSession(
            connector=connector,
            timeout=aiohttp.ClientTimeout(total=60),
            headers={
                'User-Agent': 'NASA-TEMPO-API-Client/1.0',
                'Accept': 'application/json, application/xml, text/xml, */*'
            }
        )
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Ferme la session HTTP"""
        if self.session:
            await self.session.close()
    
    # ==========================================
    # AUTHENTIFICATION NASA EARTHDATA
    # ==========================================
    
    async def _authenticate_earthdata(self) -> bool:
        """Authentifie avec NASA Earthdata URS"""
        if not self.earthdata_username or not self.earthdata_password:
            logger.error("‚ùå Credentials Earthdata manquants")
            return False
        
        try:
            logger.info("üîê Authentification NASA Earthdata...")
            
            # Utiliser l'authentification HTTP Basic pour les services OPeNDAP
            auth = aiohttp.BasicAuth(self.earthdata_username, self.earthdata_password)
            
            # Test de connexion avec un endpoint simple
            test_url = f"{self.base_urls['gesdisc']}/data/"
            
            async with self.session.get(test_url, auth=auth) as response:
                if response.status == 200:
                    logger.info("‚úÖ Authentification NASA Earthdata r√©ussie")
                    return True
                elif response.status == 401:
                    logger.error("‚ùå Credentials NASA Earthdata invalides")
                    return False
                else:
                    logger.warning(f"‚ö†Ô∏è R√©ponse inattendue: {response.status}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå Erreur authentification: {e}")
            return False
    
    # ==========================================
    # RECHERCHE ET R√âCUP√âRATION DES DONN√âES
    # ==========================================
    
    async def search_tempo_data(self, latitude: float, longitude: float, 
                               product: str = 'NO2', level: str = 'L2',
                               date: Optional[datetime] = None) -> List[Dict]:
        """
        Recherche les donn√©es TEMPO disponibles pour une location et date
        
        Args:
            latitude: Latitude cible
            longitude: Longitude cible  
            product: Type de produit ('NO2', 'HCHO', 'O3', 'AEROSOL')
            level: Niveau de traitement ('L2', 'L3')
            date: Date de recherche (d√©faut: aujourd'hui)
        
        Returns:
            Liste des fichiers/granules disponibles
        """
        if not self.is_in_tempo_coverage(latitude, longitude):
            logger.warning(f"üìç Coordonn√©es hors couverture TEMPO: {latitude}, {longitude}")
            return []
        
        if date is None:
            date = datetime.utcnow()
        
        try:
            logger.info(f"üîç Recherche TEMPO {product} {level} pour {date.strftime('%Y-%m-%d')}")
            
            # Construire la requ√™te CMR (Common Metadata Repository)
            search_params = {
                'collection_concept_id': self._get_collection_id(product, level),
                'temporal': f"{date.strftime('%Y-%m-%d')}T00:00:00Z,{date.strftime('%Y-%m-%d')}T23:59:59Z",
                'bounding_box': f"{longitude-0.5},{latitude-0.5},{longitude+0.5},{latitude+0.5}",
                'page_size': 50,
                'sort_key': 'start_date',
                'format': 'json'
            }
            
            search_url = f"{self.base_urls['search']}granules"
            
            async with self.session.get(search_url, params=search_params) as response:
                if response.status == 200:
                    data = await response.json()
                    granules = data.get('feed', {}).get('entry', [])
                    
                    logger.info(f"‚úÖ Trouv√© {len(granules)} granules TEMPO")
                    return self._parse_granule_metadata(granules)
                else:
                    logger.error(f"‚ùå Erreur recherche CMR: {response.status}")
                    return []
                    
        except Exception as e:
            logger.error(f"‚ùå Erreur recherche TEMPO: {e}")
            return []
    
    def _get_collection_id(self, product: str, level: str) -> str:
        """Retourne l'ID de collection CMR pour un produit TEMPO"""
        # Ces IDs changent, il faut les v√©rifier r√©guli√®rement
        collection_ids = {
            'NO2_L2': 'C2142121737-GES_DISC',
            'NO2_L3': 'C2142121738-GES_DISC',  
            'HCHO_L2': 'C2142121739-GES_DISC',
            'HCHO_L3': 'C2142121740-GES_DISC',
            'O3_L2': 'C2142121741-GES_DISC',
            'O3_L3': 'C2142121742-GES_DISC',
            'AEROSOL_L2': 'C2142121743-GES_DISC'
        }
        
        key = f"{product}_{level}"
        return collection_ids.get(key, collection_ids['NO2_L2'])  # Fallback
    
    def _parse_granule_metadata(self, granules: List[Dict]) -> List[Dict]:
        """Parse les m√©tadonn√©es des granules TEMPO"""
        parsed_granules = []
        
        for granule in granules:
            try:
                # Extraire les informations importantes
                title = granule.get('title', '')
                time_start = granule.get('time_start', '')
                time_end = granule.get('time_end', '')
                
                # URLs de t√©l√©chargement
                links = granule.get('links', [])
                download_urls = [
                    link['href'] for link in links 
                    if link.get('rel') == 'http://esipfed.org/ns/fedsearch/1.1/data#'
                ]
                
                parsed_granules.append({
                    'title': title,
                    'time_start': time_start,
                    'time_end': time_end,
                    'download_urls': download_urls,
                    'size_mb': self._extract_file_size(granule),
                    'processing_level': self._extract_processing_level(title)
                })
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur parsing granule: {e}")
                continue
        
        return parsed_granules
    
    def _extract_file_size(self, granule: Dict) -> float:
        """Extrait la taille du fichier en MB"""
        try:
            for link in granule.get('links', []):
                if 'length' in link:
                    return float(link['length']) / (1024 * 1024)  # Bytes to MB
        except:
            pass
        return 0.0
    
    def _extract_processing_level(self, title: str) -> str:
        """Extrait le niveau de traitement du titre"""
        if '_L2_' in title:
            return 'L2'
        elif '_L3_' in title:
            return 'L3'
        return 'Unknown'
    
    # ==========================================
    # R√âCUP√âRATION DES DONN√âES SP√âCIFIQUES
    # ==========================================
    
    async def get_tempo_no2_data(self, latitude: float, longitude: float, 
                                date: Optional[datetime] = None) -> Optional[Dict]:
        """
        R√©cup√®re les donn√©es NO2 de TEMPO pour une location sp√©cifique
        
        Returns:
            Dict avec les donn√©es NO2 ou None si indisponible
        """
        if not self.is_in_tempo_coverage(latitude, longitude):
            logger.warning("üìç Localisation hors couverture TEMPO")
            return None
        
        try:
            logger.info(f"üõ∞Ô∏è R√©cup√©ration TEMPO NO2 pour {latitude}, {longitude}")
            
            # Authentification
            if not await self._authenticate_earthdata():
                logger.error("‚ùå √âchec authentification")
                return None
            
            # Rechercher les donn√©es disponibles
            granules = await self.search_tempo_data(latitude, longitude, 'NO2', 'L2', date)
            
            if not granules:
                logger.warning("‚ö†Ô∏è Aucune donn√©e TEMPO NO2 trouv√©e")
                return await self._get_tempo_estimation(latitude, longitude, 'NO2')
            
            # Prendre le granule le plus r√©cent
            latest_granule = max(granules, key=lambda x: x['time_start'])
            
            # Tenter de r√©cup√©rer les donn√©es via OPeNDAP
            data = await self._fetch_opendap_data(latest_granule, latitude, longitude, 'NO2')
            
            if data:
                return self._format_tempo_no2_response(data, latitude, longitude, latest_granule)
            else:
                # Fallback vers estimation bas√©e sur m√©tadonn√©es
                return await self._get_tempo_estimation(latitude, longitude, 'NO2')
                
        except Exception as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration TEMPO NO2: {e}")
            return await self._get_tempo_estimation(latitude, longitude, 'NO2')
    
    async def get_tempo_comprehensive_data(self, latitude: float, longitude: float,
                                         date: Optional[datetime] = None) -> Optional[Dict]:
        """
        R√©cup√®re toutes les donn√©es TEMPO disponibles (NO2, HCHO, O3)
        
        Returns:
            Dict complet avec tous les polluants TEMPO
        """
        if not self.is_in_tempo_coverage(latitude, longitude):
            logger.warning("üìç Localisation hors couverture TEMPO")
            return None
        
        try:
            logger.info(f"üõ∞Ô∏è R√©cup√©ration compl√®te TEMPO pour {latitude}, {longitude}")
            
            # Authentification
            if not await self._authenticate_earthdata():
                logger.error("‚ùå √âchec authentification")
                return None
            
            # R√©cup√©rer tous les produits en parall√®le
            tasks = []
            for product in ['NO2', 'HCHO', 'O3']:
                task = self.search_tempo_data(latitude, longitude, product, 'L2', date)
                tasks.append(task)
            
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # Combiner les r√©sultats
            combined_data = {
                'location': f"{latitude:.4f}, {longitude:.4f}",
                'coordinates': [latitude, longitude],
                'observation_time': date.isoformat() if date else datetime.utcnow().isoformat(),
                'data_source': 'NASA TEMPO Satellite',
                'coverage_area': 'North America',
                'satellite': 'TEMPO on Intelsat-40e',
                'products': {}
            }
            
            products = ['NO2', 'HCHO', 'O3']
            for i, product in enumerate(products):
                if not isinstance(results[i], Exception) and results[i]:
                    latest_granule = max(results[i], key=lambda x: x['time_start'])
                    
                    # Essayer de r√©cup√©rer les vraies donn√©es
                    data = await self._fetch_opendap_data(latest_granule, latitude, longitude, product)
                    
                    if data:
                        combined_data['products'][product] = data
                    else:
                        # Estimation bas√©e sur les m√©tadonn√©es
                        combined_data['products'][product] = self._estimate_from_metadata(
                            latest_granule, product
                        )
                else:
                    # Pas de donn√©es disponibles
                    combined_data['products'][product] = {
                        'status': 'no_data',
                        'reason': 'No granules found for this date/location'
                    }
            
            # Calculer un AQI bas√© sur les donn√©es TEMPO
            aqi = self._calculate_tempo_aqi(combined_data['products'])
            combined_data['aqi_tempo'] = aqi
            
            return combined_data
            
        except Exception as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration compl√®te TEMPO: {e}")
            return None
    
    # ==========================================
    # ACC√àS AUX DONN√âES VIA OPENDAP
    # ==========================================
    
    async def _fetch_opendap_data(self, granule: Dict, latitude: float, 
                                longitude: float, product: str) -> Optional[Dict]:
        """
        R√©cup√®re les donn√©es via OPeNDAP (Open-source Project for a Network Data Access Protocol)
        
        OPeNDAP permet d'acc√©der aux donn√©es NetCDF/HDF5 via HTTP
        """
        try:
            # Construire l'URL OPeNDAP
            opendap_url = self._build_opendap_url(granule, product)
            
            if not opendap_url:
                logger.warning("‚ö†Ô∏è URL OPeNDAP non disponible")
                return None
            
            logger.info(f"üì° Acc√®s OPeNDAP: {opendap_url[:100]}...")
            
            # Param√®tres de subsetting spatial
            params = self._build_opendap_query(latitude, longitude, product)
            
            # Authentification
            auth = aiohttp.BasicAuth(self.earthdata_username, self.earthdata_password)
            
            async with self.session.get(opendap_url, params=params, auth=auth) as response:
                if response.status == 200:
                    # Les donn√©es peuvent √™tre en format NetCDF binaire ou ASCII
                    content_type = response.headers.get('content-type', '')
                    
                    if 'application/octet-stream' in content_type:
                        # Donn√©es binaires NetCDF - plus complexe √† parser
                        logger.warning("‚ö†Ô∏è Donn√©es NetCDF binaires - parsing complexe")
                        return None
                    else:
                        # Donn√©es ASCII/text - plus facile √† parser
                        text_data = await response.text()
                        return self._parse_opendap_ascii_data(text_data, product)
                        
                elif response.status == 401:
                    logger.error("‚ùå Authentification OPeNDAP √©chou√©e")
                    return None
                else:
                    logger.warning(f"‚ö†Ô∏è OPeNDAP status: {response.status}")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå Erreur OPeNDAP: {e}")
            return None
    
    def _build_opendap_url(self, granule: Dict, product: str) -> Optional[str]:
        """Construit l'URL OPeNDAP √† partir des m√©tadonn√©es du granule"""
        download_urls = granule.get('download_urls', [])
        
        for url in download_urls:
            if '.nc' in url or '.he5' in url:
                # Convertir l'URL de t√©l√©chargement en URL OPeNDAP
                # Format: https://disc.gsfc.nasa.gov/opendap/TEMPO/filename.nc
                filename = url.split('/')[-1]
                opendap_url = f"{self.base_urls['opendap']}TEMPO/{filename}"
                return opendap_url
        
        return None
    
    def _build_opendap_query(self, latitude: float, longitude: float, product: str) -> Dict:
        """Construit les param√®tres de requ√™te OPeNDAP pour subsetting spatial"""
        # D√©finir une petite zone autour du point d'int√©r√™t
        lat_range = 0.1  # ¬±0.1¬∞ autour du point
        lon_range = 0.1
        
        params = {
            # S√©lection des variables selon le produit
            'var': self._get_opendap_variables(product),
            # Subsetting spatial
            'north': latitude + lat_range,
            'south': latitude - lat_range,
            'east': longitude + lon_range,
            'west': longitude - lon_range,
            # Format de sortie
            'format': 'ascii'  # Plus facile √† parser que NetCDF binaire
        }
        
        return params
    
    def _get_opendap_variables(self, product: str) -> str:
        """Retourne les variables OPeNDAP √† r√©cup√©rer selon le produit"""
        variables = {
            'NO2': 'nitrogen_dioxide_total_column,latitude,longitude,time',
            'HCHO': 'formaldehyde_total_column,latitude,longitude,time', 
            'O3': 'ozone_total_column,latitude,longitude,time',
            'AEROSOL': 'aerosol_index,latitude,longitude,time'
        }
        
        return variables.get(product, variables['NO2'])
    
    def _parse_opendap_ascii_data(self, ascii_data: str, product: str) -> Optional[Dict]:
        """Parse les donn√©es ASCII retourn√©es par OPeNDAP"""
        try:
            lines = ascii_data.split('\n')
            
            # Chercher les donn√©es num√©riques
            data_started = False
            values = []
            
            for line in lines:
                line = line.strip()
                
                if line.startswith('Data:'):
                    data_started = True
                    continue
                
                if data_started and line:
                    # Parser les valeurs num√©riques
                    try:
                        value = float(line.split(',')[0])  # Premi√®re colonne = valeur principale
                        values.append(value)
                    except:
                        continue
            
            if values:
                # Calculer la moyenne des valeurs dans la zone
                avg_value = sum(values) / len(values)
                
                return {
                    'column_density': avg_value,
                    'unit': self.tempo_products[product]['unit'],
                    'values_count': len(values),
                    'data_quality': 'satellite_measurement',
                    'processing': 'opendap_subset'
                }
            else:
                logger.warning("‚ö†Ô∏è Aucune valeur num√©rique trouv√©e dans OPeNDAP")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Erreur parsing OPeNDAP ASCII: {e}")
            return None
    
    # ==========================================
    # ESTIMATIONS ET FALLBACKS
    # ==========================================
    
    async def _get_tempo_estimation(self, latitude: float, longitude: float, 
                                  product: str) -> Dict:
        """
        G√©n√®re une estimation bas√©e sur les patterns TEMPO connus
        Utilis√© quand les vraies donn√©es ne sont pas disponibles
        """
        logger.info(f"üîÑ G√©n√©ration estimation TEMPO {product}")
        
        # Facteurs g√©ographiques et temporels
        urban_factor = self._get_urban_factor(latitude, longitude)
        time_factor = self._get_time_factor()
        seasonal_factor = self._get_seasonal_factor()
        
        # Valeurs de base TEMPO typiques par produit
        base_values = {
            'NO2': {
                'background': 1e15,  # molecules/cm¬≤
                'urban_multiplier': 3.0,
                'range': (5e14, 5e15)
            },
            'HCHO': {
                'background': 8e15,  # molecules/cm¬≤
                'urban_multiplier': 2.0,
                'range': (3e15, 2e16)
            },
            'O3': {
                'background': 300,   # Dobson Units
                'urban_multiplier': 0.8,  # O3 souvent plus bas en ville
                'range': (250, 450)
            }
        }
        
        product_config = base_values.get(product, base_values['NO2'])
        
        # Calcul de la valeur estim√©e
        estimated_value = (
            product_config['background'] * 
            urban_factor * 
            time_factor * 
            seasonal_factor * 
            product_config['urban_multiplier']
        )
        
        # Contraindre dans la plage r√©aliste
        min_val, max_val = product_config['range']
        estimated_value = max(min_val, min(max_val, estimated_value))
        
        return {
            'column_density': estimated_value,
            'unit': self.tempo_products[product]['unit'],
            'data_quality': 'estimated',
            'estimation_factors': {
                'urban_factor': urban_factor,
                'time_factor': time_factor,
                'seasonal_factor': seasonal_factor
            },
            'note': 'Estimated value based on TEMPO typical patterns'
        }
    
    def _get_urban_factor(self, latitude: float, longitude: float) -> float:
        """Calcule un facteur d'urbanisation bas√© sur la localisation"""
        # Grandes zones urbaines nord-am√©ricaines
        major_cities = [
            (40.7128, -74.0060, "New York", 2.5),
            (34.0522, -118.2437, "Los Angeles", 2.3),
            (41.8781, -87.6298, "Chicago", 2.0),
            (29.7604, -95.3698, "Houston", 1.8),
            (43.6532, -79.3832, "Toronto", 1.9),
            (45.5017, -73.5673, "Montreal", 1.7),
            (19.4326, -99.1332, "Mexico City", 3.0)
        ]
        
        min_distance = float('inf')
        urban_factor = 1.0
        
        for city_lat, city_lon, city_name, factor in major_cities:
            distance = self._calculate_distance(latitude, longitude, city_lat, city_lon)
            
            if distance < 100:  # Dans un rayon de 100km
                # Plus on est proche, plus le facteur est √©lev√©
                proximity_factor = max(0.5, 1 - distance / 100)
                urban_factor = max(urban_factor, factor * proximity_factor)
        
        return min(urban_factor, 3.0)  # Plafond √† 3.0
    
    def _get_time_factor(self) -> float:
        """Facteur bas√© sur l'heure de la journ√©e"""
        current_hour = datetime.utcnow().hour
        
        # Patterns diurnes typiques pour les polluants
        # Maximum pendant les heures de pointe et d'activit√© photochimique
        if 7 <= current_hour <= 9:  # Pointe du matin
            return 1.3
        elif 10 <= current_hour <= 15:  # Activit√© photochimique maximum
            return 1.2
        elif 17 <= current_hour <= 19:  # Pointe du soir
            return 1.4
        elif 20 <= current_hour <= 23:  # Soir√©e
            return 0.9
        else:  # Nuit
            return 0.7
    
    def _get_seasonal_factor(self) -> float:
        """Facteur saisonnier"""
        month = datetime.utcnow().month
        
        # Patterns saisonniers nord-am√©ricains
        if 12 <= month <= 2:  # Hiver
            return 1.1  # Plus de chauffage, moins de photochimie
        elif 3 <= month <= 5:  # Printemps
            return 1.0
        elif 6 <= month <= 8:  # √ât√©
            return 1.3  # Maximum photochimique
        else:  # Automne (9-11)
            return 0.9
    
    def _calculate_distance(self, lat1: float, lon1: float, lat2: float, lon2: float) -> float:
        """Calcule la distance en kilom√®tres entre deux points"""
        R = 6371  # Rayon de la Terre en km
        
        dlat = math.radians(lat2 - lat1)
        dlon = math.radians(lon2 - lon1)
        
        a = (math.sin(dlat/2)**2 + 
             math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dlon/2)**2)
        c = 2 * math.asin(math.sqrt(a))
        
        return R * c
    
    # ==========================================
    # FORMATAGE DES R√âPONSES
    # ==========================================
    
    def _format_tempo_no2_response(self, data: Dict, latitude: float, 
                                 longitude: float, granule: Dict) -> Dict:
        """Formate la r√©ponse NO2 TEMPO en format standard"""
        
        # Convertir la densit√© de colonne en concentration de surface approximative
        column_density = data.get('column_density', 0)
        surface_concentration = self._column_to_surface_no2(column_density)
        
        return {
            'name': f"TEMPO NO2 {latitude:.3f}, {longitude:.3f}",
            'coordinates': [latitude, longitude],
            'no2_column_density': column_density,
            'no2_surface_estimate': surface_concentration,
            'no2': surface_concentration,  # Compatibilit√© format standard
            'pm25': 0,  # TEMPO ne mesure pas PM
            'pm10': 0,
            'o3': 0,    # Sera r√©cup√©r√© s√©par√©ment
            'so2': 0,   # TEMPO ne mesure pas SO2
            'co': 0,    # TEMPO ne mesure pas CO
            'aqi': self._no2_to_aqi(surface_concentration),
            'data_source': 'NASA TEMPO Satellite (Real)',
            'satellite': 'TEMPO on Intelsat-40e',
            'observation_time': granule.get('time_start', ''),
            'granule_title': granule.get('title', ''),
            'data_quality': data.get('data_quality', 'satellite'),
            'coverage': 'North America',
            'spatial_resolution': '2.1 x 4.4 km',
            'temporal_resolution': 'Hourly',
            'units': {
                'no2_column': 'molecules/cm¬≤',
                'no2_surface': '¬µg/m¬≥'
            },
            'last_updated': datetime.utcnow().isoformat() + "Z"
        }
    
    def _estimate_from_metadata(self, granule: Dict, product: str) -> Dict:
        """Estime les valeurs bas√©es sur les m√©tadonn√©es du granule"""
        # Utiliser le titre et les m√©tadonn√©es pour estimer
        title = granule.get('title', '')
        
        # Patterns dans les titres TEMPO
        if 'HIGH' in title.upper():
            multiplier = 1.5
        elif 'LOW' in title.upper():
            multiplier = 0.7
        else:
            multiplier = 1.0
        
        base_estimates = {
            'NO2': 2e15 * multiplier,
            'HCHO': 1e16 * multiplier,
            'O3': 320 * multiplier
        }
        
        return {
            'column_density': base_estimates.get(product, base_estimates['NO2']),
            'unit': self.tempo_products[product]['unit'],
            'data_quality': 'metadata_estimate',
            'granule_title': title
        }
    
    def _column_to_surface_no2(self, column_density: float) -> float:
        """
        Convertit la densit√© de colonne NO2 en concentration de surface approximative
        
        Args:
            column_density: Densit√© de colonne en molecules/cm¬≤
        
        Returns:
            Concentration de surface estim√©e en ¬µg/m¬≥
        """
        # Conversion approximative bas√©e sur les relations TEMPO
        # 1e15 molecules/cm¬≤ ‚âà 20-40 ¬µg/m¬≥ en surface (tr√®s variable)
        
        if column_density <= 0:
            return 0.0
        
        # Facteur de conversion moyen
        conversion_factor = 30e-15  # ¬µg/m¬≥ per (molecules/cm¬≤)
        surface_conc = column_density * conversion_factor
        
        # Contraindre dans une plage r√©aliste
        return max(0, min(200, surface_conc))
    
    def _calculate_tempo_aqi(self, products: Dict) -> int:
        """Calcule un AQI bas√© sur les produits TEMPO disponibles"""
        aqi_values = []
        
        for product, data in products.items():
            if data.get('status') == 'no_data':
                continue
            
            column_density = data.get('column_density', 0)
            
            if product == 'NO2' and column_density > 0:
                surface_no2 = self._column_to_surface_no2(column_density)
                aqi_values.append(self._no2_to_aqi(surface_no2))
            elif product == 'O3' and column_density > 0:
                # Conversion approximative O3 colonne -> surface
                surface_o3 = column_density * 0.3  # Tr√®s approximatif
                aqi_values.append(self._o3_to_aqi(surface_o3))
        
        return max(aqi_values) if aqi_values else 50
    
    def _no2_to_aqi(self, no2_ug_m3: float) -> int:
        """Convertit NO2 ¬µg/m¬≥ en AQI"""
        if no2_ug_m3 <= 40:
            return int(no2_ug_m3 * 50 / 40)
        elif no2_ug_m3 <= 80:
            return int(50 + (no2_ug_m3 - 40) * 50 / 40)
        elif no2_ug_m3 <= 120:
            return int(100 + (no2_ug_m3 - 80) * 50 / 40)
        else:
            return min(200, int(150 + (no2_ug_m3 - 120) * 50 / 80))
    
    def _o3_to_aqi(self, o3_ug_m3: float) -> int:
        """Convertit O3 ¬µg/m¬≥ en AQI"""
        if o3_ug_m3 <= 100:
            return int(o3_ug_m3 * 50 / 100)
        elif o3_ug_m3 <= 160:
            return int(50 + (o3_ug_m3 - 100) * 50 / 60)
        else:
            return min(150, int(100 + (o3_ug_m3 - 160) * 50 / 55))
    
    # ==========================================
    # M√âTHODES PUBLIQUES PRINCIPALES
    # ==========================================
    
    async def get_current_tempo_data(self, latitude: float, longitude: float) -> Optional[Dict]:
        """
        M√©thode principale pour r√©cup√©rer les donn√©es TEMPO actuelles
        
        Args:
            latitude: Latitude de la localisation
            longitude: Longitude de la localisation
        
        Returns:
            Dictionnaire avec toutes les donn√©es TEMPO disponibles
        """
        logger.info(f"üõ∞Ô∏è R√©cup√©ration donn√©es TEMPO pour {latitude}, {longitude}")
        
        if not self.is_in_tempo_coverage(latitude, longitude):
            logger.warning("üìç Localisation hors couverture TEMPO (Am√©rique du Nord)")
            return None
        
        # R√©cup√©rer les donn√©es compl√®tes
        data = await self.get_tempo_comprehensive_data(latitude, longitude)
        
        if data:
            logger.info("‚úÖ Donn√©es TEMPO r√©cup√©r√©es avec succ√®s")
            return data
        else:
            logger.warning("‚ö†Ô∏è √âchec r√©cup√©ration TEMPO, g√©n√©ration d'estimations")
            # Fallback vers estimations
            return await self._get_tempo_estimation(latitude, longitude, 'NO2')


# ==========================================
# SCRIPT DE TEST
# ==========================================

async def test_tempo_connector():
    """Test du connecteur TEMPO avec diff√©rentes localisations"""
    print("üß™ TEST DU CONNECTEUR NASA TEMPO")
    print("=" * 50)
    
    # V√©rifier les credentials
    if not os.getenv('NASA_EARTHDATA_USERNAME'):
        print("‚ùå Credentials NASA Earthdata manquants!")
        print("üìù Configurez:")
        print("   export NASA_EARTHDATA_USERNAME='votre_username'")
        print("   export NASA_EARTHDATA_PASSWORD='votre_password'")
        return
    
    # Localisations de test en Am√©rique du Nord
    test_locations = [
        (40.7128, -74.0060, "New York"),
        (34.0522, -118.2437, "Los Angeles"),
        (43.6532, -79.3832, "Toronto"),
        (25.7617, -80.1918, "Miami"),
        (45.5017, -73.5673, "Montreal")
    ]
    
    async with NASATempoConnector() as tempo:
        for lat, lon, city in test_locations:
            print(f"\nüìç Test TEMPO pour {city} ({lat}, {lon})")
            print("-" * 30)
            
            # Test de couverture
            if tempo.is_in_tempo_coverage(lat, lon):
                print("‚úÖ Dans la zone de couverture TEMPO")
                
                # Test r√©cup√©ration des donn√©es
                try:
                    data = await tempo.get_current_tempo_data(lat, lon)
                    
                    if data:
                        print(f"‚úÖ Donn√©es r√©cup√©r√©es:")
                        print(f"   Source: {data.get('data_source')}")
                        print(f"   AQI TEMPO: {data.get('aqi_tempo', 'N/A')}")
                        
                        if 'products' in data:
                            for product, product_data in data['products'].items():
                                density = product_data.get('column_density', 'N/A')
                                unit = product_data.get('unit', '')
                                print(f"   {product}: {density} {unit}")
                    else:
                        print("‚ö†Ô∏è Aucune donn√©e TEMPO disponible")
                        
                except Exception as e:
                    print(f"‚ùå Erreur: {e}")
            else:
                print("‚ùå Hors zone de couverture TEMPO")

if __name__ == "__main__":
    # Test du connecteur
    asyncio.run(test_tempo_connector())