"""
SCRIPT D'AIDE POUR OBTENIR LES CL√âS API R√âELLES
"""

import os
import asyncio
import aiohttp
from datetime import datetime

def print_header(title):
    print("\n" + "="*60)
    print(f"  {title}")
    print("="*60)

def print_step(step, description):
    print(f"\n{step}. {description}")
    print("-" * 40)

def check_environment_variables():
    """V√©rifie quelles variables d'environnement sont d√©finies"""
    print_header("V√âRIFICATION DES CL√âS API ACTUELLES")
    
    api_keys = {
        'OpenAQ v3': 'OPENAQ_API_KEY',
        'PurpleAir': 'PURPLEAIR_API_KEY', 
        'AirNow EPA': 'AIRNOW_API_KEY',
        'IQAir': 'IQAIR_API_KEY',
        'NASA Earthdata Username': 'NASA_EARTHDATA_USERNAME',
        'NASA Earthdata Password': 'NASA_EARTHDATA_PASSWORD'
    }
    
    configured = []
    missing = []
    
    for service, env_var in api_keys.items():
        value = os.getenv(env_var)
        if value:
            configured.append(f"‚úÖ {service}: {'*' * (len(value)-4) + value[-4:] if len(value) > 4 else '*' * len(value)}")
        else:
            missing.append(f"‚ùå {service}: Variable {env_var} manquante")
    
    if configured:
        print("\nüü¢ CL√âS CONFIGUR√âES:")
        for item in configured:
            print(f"   {item}")
    
    if missing:
        print("\nüî¥ CL√âS MANQUANTES:")
        for item in missing:
            print(f"   {item}")
        print(f"\nüí° Total √† configurer: {len(missing)} sur {len(api_keys)}")
    else:
        print("\nüéâ TOUTES LES CL√âS SONT CONFIGUR√âES!")
    
    return len(missing) == 0

def guide_openaq_v3():
    """Guide pour obtenir la cl√© OpenAQ v3"""
    print_header("üåê OPENAQ V3 - GRATUIT (RECOMMAND√â)")
    
    print_step("1", "Aller sur le site OpenAQ")
    print("   URL: https://openaq.org/")
    print("   üìß Cr√©er un compte gratuit")
    
    print_step("2", "Demander l'acc√®s API")
    print("   üì© Contact: https://openaq.org/contact")
    print("   üìù Mentionner: 'Demande d'acc√®s API v3 pour projet de recherche air quality'")
    print("   ‚è±Ô∏è D√©lai: 1-3 jours ouvrables")
    
    print_step("3", "R√©cup√©rer la cl√©")
    print("   üìß Vous recevrez la cl√© par email")
    print("   üîê Format: 'openaq_api_key_xxxxxxxxxxxxx'")
    
    print_step("4", "Configurer la variable d'environnement")
    print("   Windows PowerShell:")
    print("   $env:OPENAQ_API_KEY='votre_cle_ici'")
    print("   ")
    print("   Linux/Mac:")
    print("   export OPENAQ_API_KEY='votre_cle_ici'")
    
    print("\nüí° AVANTAGES:")
    print("   ‚úÖ Gratuit pour usage raisonnable")
    print("   ‚úÖ Donn√©es mondiales")
    print("   ‚úÖ Tr√®s fiable")
    print("   ‚úÖ API moderne et bien document√©e")

def guide_purpleair():
    """Guide pour obtenir la cl√© PurpleAir"""
    print_header("üü£ PURPLEAIR - PAYANT (~10‚Ç¨/mois)")
    
    print_step("1", "Cr√©er un compte")
    print("   URL: https://develop.purpleair.com/")
    print("   üìß Inscription gratuite")
    
    print_step("2", "Souscrire √† un plan API")
    print("   üí∞ Prix: ~$10/mois (‚âà10‚Ç¨)")
    print("   üìä Limites: 1000 requ√™tes/jour (plan de base)")
    print("   üîÑ Upgrade possible")
    
    print_step("3", "Obtenir la cl√©")
    print("   üîê Disponible dans votre dashboard")
    print("   üìã Format: UUID (ex: 12345678-1234-5678-9012-123456789012)")
    
    print_step("4", "Configurer")
    print("   $env:PURPLEAIR_API_KEY='votre_uuid_ici'")
    
    print("\nüí° AVANTAGES:")
    print("   ‚úÖ Excellent pour PM2.5/PM10")
    print("   ‚úÖ R√©seau dense aux USA")
    print("   ‚úÖ Donn√©es temps r√©el")
    print("   ‚úÖ API stable et rapide")

def guide_airnow():
    """Guide pour obtenir la cl√© AirNow EPA"""
    print_header("üá∫üá∏ AIRNOW EPA - GRATUIT (USA seulement)")
    
    print_step("1", "Demander une cl√©")
    print("   URL: https://docs.airnowapi.org/account")
    print("   üìß Remplir le formulaire")
    print("   ‚è±Ô∏è D√©lai: 1-2 jours")
    
    print_step("2", "Recevoir la cl√©")
    print("   üìß Envoy√©e par email")
    print("   üîê Format: UUID")
    
    print_step("3", "Configurer")
    print("   $env:AIRNOW_API_KEY='votre_cle_ici'")
    
    print("\nüí° AVANTAGES:")
    print("   ‚úÖ Gratuit")
    print("   ‚úÖ Donn√©es officielles EPA")
    print("   ‚úÖ Tr√®s fiable")
    print("   ‚ùå USA seulement")

def guide_iqair():
    """Guide pour obtenir la cl√© IQAir"""
    print_header("üåç IQAIR - PREMIUM (~30‚Ç¨/mois)")
    
    print_step("1", "Cr√©er un compte")
    print("   URL: https://www.iqair.com/air-pollution-data-api")
    print("   üìß Inscription")
    
    print_step("2", "Choisir un plan")
    print("   üí∞ Prix: $29-199/mois (‚âà30-200‚Ç¨)")
    print("   üìä Community: 10,000 calls/mois")
    print("   üè¢ Startup: 100,000 calls/mois")
    
    print_step("3", "Obtenir la cl√©")
    print("   üîê Dans votre dashboard")
    print("   üìã Format: UUID")
    
    print_step("4", "Configurer")
    print("   $env:IQAIR_API_KEY='votre_cle_ici'")
    
    print("\nüí° AVANTAGES:")
    print("   ‚úÖ Couverture mondiale excellent")
    print("   ‚úÖ Donn√©es m√©t√©o incluses")
    print("   ‚úÖ API tr√®s stable")
    print("   ‚úÖ Support commercial")

def guide_nasa_earthdata():
    """Guide pour obtenir les credentials NASA Earthdata"""
    print_header("üõ∞Ô∏è NASA EARTHDATA - GRATUIT")
    
    print_step("1", "Cr√©er un compte NASA Earthdata")
    print("   URL: https://urs.earthdata.nasa.gov/")
    print("   üìß Inscription gratuite")
    print("   üìã Remplir le profil")
    
    print_step("2", "Activer l'acc√®s aux applications")
    print("   üîê Approuver l'acc√®s aux donn√©es TEMPO")
    print("   üìä Applications -> Authorize")
    
    print_step("3", "Configurer les credentials")
    print("   $env:NASA_EARTHDATA_USERNAME='votre_username'")
    print("   $env:NASA_EARTHDATA_PASSWORD='votre_password'")
    
    print("\nüí° AVANTAGES:")
    print("   ‚úÖ Gratuit")
    print("   ‚úÖ Donn√©es satellitaires officielles")
    print("   ‚úÖ Acc√®s √† TEMPO, AIRS, etc.")
    print("   ‚ùå API complexe (NetCDF/HDF5)")

def create_env_file_template():
    """Cr√©e un fichier .env template"""
    print_header("üìÑ CR√âATION DU FICHIER .ENV")
    
    env_content = """# Cl√©s API pour sources de donn√©es r√©elles
# Obtenez ces cl√©s en suivant le guide

# OpenAQ v3 (Gratuit - Recommand√©)
# https://openaq.org/contact
OPENAQ_API_KEY=

# PurpleAir (~10‚Ç¨/mois)
# https://develop.purpleair.com/
PURPLEAIR_API_KEY=

# AirNow EPA (Gratuit - USA seulement)
# https://docs.airnowapi.org/account
AIRNOW_API_KEY=

# IQAir (~30‚Ç¨/mois - Premium)
# https://www.iqair.com/air-pollution-data-api
IQAIR_API_KEY=

# NASA Earthdata (Gratuit)
# https://urs.earthdata.nasa.gov/
NASA_EARTHDATA_USERNAME=
NASA_EARTHDATA_PASSWORD=

# Configuration optionnelle
API_CACHE_DURATION=300
API_TIMEOUT=30
API_MAX_RETRIES=3
"""
    
    try:
        with open('.env', 'w', encoding='utf-8') as f:
            f.write(env_content)
        print("‚úÖ Fichier .env cr√©√© avec succ√®s!")
        print("üìù √âditez le fichier .env pour ajouter vos cl√©s API")
        print("üîê Ne commitez JAMAIS ce fichier dans git!")
        
        # Cr√©er aussi .env.example
        with open('.env.example', 'w', encoding='utf-8') as f:
            f.write(env_content)
        print("‚úÖ Fichier .env.example cr√©√© pour r√©f√©rence")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du fichier .env: {e}")

def create_powershell_script():
    """Cr√©e un script PowerShell pour configurer les variables"""
    print_header("‚ö° SCRIPT POWERSHELL DE CONFIGURATION")
    
    ps_content = """# Script PowerShell pour configurer les variables d'environnement
# Ex√©cutez ce script apr√®s avoir obtenu vos cl√©s API

Write-Host "üîß Configuration des variables d'environnement API" -ForegroundColor Green

# Demander les cl√©s √† l'utilisateur
$openaq = Read-Host "OpenAQ API Key (optionnel, appuyez sur Entr√©e pour ignorer)"
$purpleair = Read-Host "PurpleAir API Key (optionnel, appuyez sur Entr√©e pour ignorer)"
$airnow = Read-Host "AirNow EPA API Key (optionnel, appuyez sur Entr√©e pour ignorer)"
$iqair = Read-Host "IQAir API Key (optionnel, appuyez sur Entr√©e pour ignorer)"
$nasa_user = Read-Host "NASA Earthdata Username (optionnel, appuyez sur Entr√©e pour ignorer)"
$nasa_pass = Read-Host "NASA Earthdata Password (optionnel, appuyez sur Entr√©e pour ignorer)" -AsSecureString

# Configurer les variables (session actuelle)
if ($openaq) { $env:OPENAQ_API_KEY = $openaq }
if ($purpleair) { $env:PURPLEAIR_API_KEY = $purpleair }
if ($airnow) { $env:AIRNOW_API_KEY = $airnow }
if ($iqair) { $env:IQAIR_API_KEY = $iqair }
if ($nasa_user) { $env:NASA_EARTHDATA_USERNAME = $nasa_user }
if ($nasa_pass) { 
    $nasa_pass_plain = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($nasa_pass))
    $env:NASA_EARTHDATA_PASSWORD = $nasa_pass_plain 
}

Write-Host "‚úÖ Variables configur√©es pour cette session" -ForegroundColor Green
Write-Host "üí° Pour les rendre permanentes, ajoutez-les aux Variables Syst√®me Windows" -ForegroundColor Yellow

# Afficher les variables configur√©es
Write-Host "`nüìä Variables configur√©es:" -ForegroundColor Cyan
if ($env:OPENAQ_API_KEY) { Write-Host "   ‚úÖ OPENAQ_API_KEY" -ForegroundColor Green }
if ($env:PURPLEAIR_API_KEY) { Write-Host "   ‚úÖ PURPLEAIR_API_KEY" -ForegroundColor Green }
if ($env:AIRNOW_API_KEY) { Write-Host "   ‚úÖ AIRNOW_API_KEY" -ForegroundColor Green }
if ($env:IQAIR_API_KEY) { Write-Host "   ‚úÖ IQAIR_API_KEY" -ForegroundColor Green }
if ($env:NASA_EARTHDATA_USERNAME) { Write-Host "   ‚úÖ NASA_EARTHDATA_USERNAME" -ForegroundColor Green }
if ($env:NASA_EARTHDATA_PASSWORD) { Write-Host "   ‚úÖ NASA_EARTHDATA_PASSWORD" -ForegroundColor Green }
"""
    
    try:
        with open('setup_api_keys.ps1', 'w', encoding='utf-8') as f:
            f.write(ps_content)
        print("‚úÖ Script setup_api_keys.ps1 cr√©√©!")
        print("üìù Ex√©cutez: ./setup_api_keys.ps1")
        print("üîê Le script vous demandera vos cl√©s de mani√®re s√©curis√©e")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du script: {e}")

async def test_api_connectivity():
    """Test la connectivit√© aux APIs (sans cl√©s)"""
    print_header("üß™ TEST DE CONNECTIVIT√â DES APIS")
    
    apis_to_test = [
        ("OpenAQ v3", "https://api.openaq.org/v3/locations?limit=1"),
        ("PurpleAir", "https://api.purpleair.com/v1/keys"),
        ("AirNow EPA", "https://www.airnowapi.org/"),
        ("IQAir", "https://api.airvisual.com/v2/"),
        ("NASA Earthdata", "https://urs.earthdata.nasa.gov/")
    ]
    
    async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
        for name, url in apis_to_test:
            try:
                print(f"\nüì° Test {name}...")
                async with session.get(url) as response:
                    status = response.status
                    if status in [200, 401, 403]:  # 401/403 = API accessible mais auth requise
                        print(f"   ‚úÖ {name}: Accessible (Status {status})")
                    else:
                        print(f"   ‚ö†Ô∏è {name}: Status {status}")
                        
            except Exception as e:
                print(f"   ‚ùå {name}: Erreur de connexion - {str(e)[:50]}...")

def show_cost_summary():
    """Affiche un r√©sum√© des co√ªts"""
    print_header("üí∞ R√âSUM√â DES CO√õTS")
    
    costs = [
        ("üåê OpenAQ v3", "GRATUIT", "Donn√©es mondiales, excellent choix"),
        ("üá∫üá∏ AirNow EPA", "GRATUIT", "USA seulement, donn√©es officielles"),
        ("üõ∞Ô∏è NASA Earthdata", "GRATUIT", "Donn√©es satellitaires, complexe"),
        ("üü£ PurpleAir", "~10‚Ç¨/mois", "Excellent pour PM2.5/PM10"),
        ("üåç IQAir", "~30‚Ç¨/mois", "Premium, couverture mondiale")
    ]
    
    print("\nüìä OPTIONS PAR CO√õT:")
    for service, cost, description in costs:
        print(f"   {service:<20} {cost:<15} - {description}")
    
    print("\nüéØ RECOMMANDATIONS:")
    print("   üÜì BUDGET Z√âRO: OpenAQ v3 + AirNow EPA + NASA Earthdata")
    print("   üí∞ BUDGET LIMIT√â: + PurpleAir (10‚Ç¨/mois)")
    print("   üè¢ PROFESSIONNEL: + IQAir (40‚Ç¨/mois total)")
    
    print("\n‚è±Ô∏è D√âLAIS D'OBTENTION:")
    print("   üöÄ Imm√©diat: NASA Earthdata")
    print("   üìß 1-3 jours: OpenAQ v3, AirNow EPA")
    print("   üí≥ Imm√©diat (payant): PurpleAir, IQAir")

def main():
    """Fonction principale du guide"""
    print("üöÄ GUIDE COMPLET POUR OBTENIR DES DONN√âES R√âELLES")
    print("=" * 60)
    print("Ce guide va vous aider √† obtenir les cl√©s API pour remplacer")
    print("les donn√©es simul√©es par de VRAIES donn√©es de qualit√© de l'air!")
    
    # V√©rification initiale
    all_configured = check_environment_variables()
    
    if all_configured:
        print("\nüéâ Toutes vos cl√©s sont d√©j√† configur√©es!")
        print("‚úÖ Vous pouvez utiliser le connecteur API r√©el")
        return
    
    print("\nüìã MENU DES GUIDES:")
    print("1. üåê OpenAQ v3 (GRATUIT - Recommand√©)")
    print("2. üü£ PurpleAir (~10‚Ç¨/mois)")
    print("3. üá∫üá∏ AirNow EPA (GRATUIT - USA)")
    print("4. üåç IQAir (~30‚Ç¨/mois - Premium)")
    print("5. üõ∞Ô∏è NASA Earthdata (GRATUIT)")
    print("6. üìÑ Cr√©er fichier .env template")
    print("7. ‚ö° Cr√©er script PowerShell")
    print("8. üß™ Tester connectivit√© APIs")
    print("9. üí∞ R√©sum√© des co√ªts")
    print("0. üîÑ V√©rifier variables actuelles")
    
    while True:
        try:
            choice = input("\nüëâ Choisissez une option (ou 'q' pour quitter): ").strip()
            
            if choice.lower() == 'q':
                break
            elif choice == '1':
                guide_openaq_v3()
            elif choice == '2':
                guide_purpleair()
            elif choice == '3':
                guide_airnow()
            elif choice == '4':
                guide_iqair()
            elif choice == '5':
                guide_nasa_earthdata()
            elif choice == '6':
                create_env_file_template()
            elif choice == '7':
                create_powershell_script()
            elif choice == '8':
                asyncio.run(test_api_connectivity())
            elif choice == '9':
                show_cost_summary()
            elif choice == '0':
                check_environment_variables()
            else:
                print("‚ùå Option invalide. Choisissez 1-9 ou 'q'")
                
        except KeyboardInterrupt:
            print("\n\nüëã Au revoir!")
            break

if __name__ == "__main__":
    main()